package com.hafiz.www.controller;

import com.hafiz.www.po.MessageRemark;
import com.hafiz.www.po.MessageWal;
import com.hafiz.www.po.PublicPagingQuery;
import com.hafiz.www.service.MessageRemarkService;
import com.hafiz.www.service.MessageWalService;
import com.hafiz.www.shiro.SessionUtils;
import com.hafiz.www.until.JsonResult;
import com.hafiz.www.until.SaveThePicture;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.http.HttpServletRequest;

/**
 * 留言墙
 */
@Controller
@RequestMapping("/message")
public class MessageWalController {

    @Autowired
    private MessageWalService messageWalService;
    @Autowired
    private MessageRemarkService messageRemarkService;
    /**
     * 跳转到发布留言墙
     * @param modelAndView 视图
     * @return 视图
     */
    @RequestMapping("/publish")
    public ModelAndView jumpToPublishMessage(ModelAndView modelAndView){
        modelAndView.setViewName("/messageWal/publishMessage");
        return  modelAndView;
    }

    /**
     * 跳转到我的留言墙
     * @param modelAndView 视图  /messageWal/myMessage
     * @return 视图
     */
    @RequestMapping("/myMessage")
    public ModelAndView jumpToMyMessage(ModelAndView modelAndView){
        modelAndView.setViewName("/messageWal/myMessage");
        return  modelAndView;
    }


    /**
     * 发布留言图片上传
     * @param file  上传图片
     * @return  返回图片保存路径
     */
    @RequestMapping(value="/uploadPicture",method = RequestMethod.POST)
    @ResponseBody
    public String uploadThePicture(HttpServletRequest request, @RequestParam("myFileName")MultipartFile file){
        return new SaveThePicture().savePicture(file);
    }

    /**
     * 发布留言数据保存
     * @param messageWal  上传数据对象
     * @return 返回保存状态
     */
    @RequestMapping(value = "/publishMessage",method = RequestMethod.POST)
    @ResponseBody
    public JsonResult publishMessage(MessageWal messageWal){
        JsonResult jsonResult = new JsonResult();
        String content =messageWal.getW_content();
        if(content.contains("border=\"0\"")){//将上传的留言中如果含有表格则将其border改为1
            content=content.replace("border=\"0\"","border=\"1\"");
        }
        messageWal.setW_content(content);
        int data =messageWalService.insertSelective(messageWal);
        if(data==1){
            jsonResult= jsonResult.newInstanceSucess_d1("保存成功");
        }else if(data==-1){
            jsonResult= jsonResult.newInstanceSucess_d1("请先登陆系统！");
        }else{
            jsonResult= jsonResult.newInstanceSucess_d1("系统出错，请稍后再试！");
        }
        return jsonResult;
    }

    /**
     * 查询留言墙数据
     * @return json数据 PublicPagingQuery publicPagingQuery,MessageWal messageWal
     */
    @RequestMapping(value = "/queryMessageData",method = RequestMethod.POST)
    @ResponseBody
    public JsonResult getTheMessageData(PublicPagingQuery publicPagingQuery){
        JsonResult jsonObject = new JsonResult();
        MessageWal messageWal = new MessageWal();
        messageWal.setW_status(publicPagingQuery.getW_status());
        if(publicPagingQuery.getFYType().equals("owner")){
            int id=new SessionUtils().getLoginUserId();
            if(id==0){
                jsonObject=jsonObject.newInstanceFail("请先登录系统，再查询！");
                return jsonObject;
            }else{
                messageWal.setW_uid(id);//用于登陆用户根据用户id查询;
            }
        }
        try{
            publicPagingQuery.setQueryObj(messageWal);
            messageWalService.selectMessageData(publicPagingQuery);
            jsonObject= jsonObject.newInstanceSuccess(publicPagingQuery);
        }catch (Exception e){
            e.printStackTrace();
        }
       return jsonObject;
    }

    /**
     * 点赞
     * @param w_id  数据id
     * @return 保存信息状态
     */
    @RequestMapping(value = "/giveThumbsUp",method = RequestMethod.POST)
    @ResponseBody
    public JsonResult giveThumbsUp(String w_id,HttpServletRequest request){
        JsonResult jsonResult = new JsonResult();
        if(w_id==null || w_id==""){
            jsonResult=jsonResult.newInstanceFail("系统出错，请稍后再试！");
        }else{
            MessageWal messageWal =new MessageWal();
            try {
                messageWal = messageWalService.selectByPrimaryKey(Integer.parseInt(w_id));
                String number =messageWal.getW_praisenumber();//数据库存储的点赞数
                int w_praisenumber=0;
                if(number==null || number.equals("")){
                    w_praisenumber=0;
                }
                w_praisenumber =Integer.parseInt(number==null?"0":number)+1;
                messageWal = new MessageWal();
                messageWal.setW_id(Integer.parseInt(w_id));
                messageWal.setW_praisenumber(String.valueOf(w_praisenumber));
                int data =messageWalService.updateByPrimaryKeySelective(messageWal);
                if(data>0){

                    messageWal = messageWalService.selectByPrimaryKey(Integer.parseInt(w_id));
                    number =messageWal.getW_praisenumber();//数据库存储的点赞数
                    jsonResult= jsonResult.newInstanceSuccess(number);
                }
            }catch (Exception e){
                e.printStackTrace();
                jsonResult=jsonResult.newInstanceFail("系统出错，请稍后再试！");
            }
        }
        return jsonResult;
    }

    /**
     * 删除留言内容根据数据id
     * @param w_id  数据id
     * @return 删除状态
     */
    @RequestMapping(value = "/deleteTheMessage",method = RequestMethod.POST)
    @ResponseBody
    public JsonResult deleteTheMessage(String w_id,HttpServletRequest request){
        JsonResult jsonResult = new JsonResult();
        if(w_id==null || w_id==""){
            jsonResult=jsonResult.newInstanceFail("系统出错，请稍后再试！");
        }else{
            try {
                int data =messageWalService.deleteByPrimaryKey(Integer.parseInt(w_id));
                if(data>0){
                    jsonResult= jsonResult.newInstanceSucess_d1("删除成功");
                }
            }catch (Exception e){
                e.printStackTrace();
                jsonResult=jsonResult.newInstanceFail("系统出错，请稍后再试！");
            }
        }
        return jsonResult;
    }

    /**
     * 根据数据id获取单条数据
     * @param w_id  数据id
     * @return  单个对象
     */
    @RequestMapping( value = "/selectMessageByid",method = RequestMethod.POST)
    @ResponseBody
    public JsonResult selectMessageById(String w_id){
        JsonResult jsonResult = new JsonResult();
        if(w_id==null || w_id==""){
            jsonResult=jsonResult.newInstanceFail("系统出错，请稍后再试！");
        }else{
            MessageWal messageWal =new MessageWal();
            try {
                messageWal = messageWalService.selectByPrimaryKey(Integer.parseInt(w_id));
                jsonResult = jsonResult.newInstanceSuccess(messageWal);
            }catch (Exception e){
                e.printStackTrace();
                jsonResult=jsonResult.newInstanceFail("系统出错，请稍后再试！");
            }
        }
        return jsonResult;
    }


}
